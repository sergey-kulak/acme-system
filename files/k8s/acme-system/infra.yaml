---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pg-pvc
  namespace: acme
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pg-db
  namespace: acme
spec:
  selector:
    matchLabels:
      app: pg-db
  replicas: 1
  template:
    metadata:
      labels:
        app: pg-db
    spec:
      containers:
        - name: pg-db
          image: postgres:13.3-alpine
          env:
            - name: POSTGRES_USER
              value: "acmeUser"
            - name: POSTGRES_PASSWORD
              value: "@acmePas2"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: pg-storate
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: pg-storate
          persistentVolumeClaim:
            claimName: pg-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: pg-db
  namespace: acme
spec:
  type: ClusterIP
  selector:
    app: pg-db
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: acme
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-db
  namespace: acme
spec:
  selector:
    matchLabels:
      app: mongo-db
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo-db
    spec:
      containers:
        - name: mongo-db
          image: mongo:5.0.2
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: "acmeUser"
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: "@acmePas2"
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-db
  namespace: acme
spec:
  type: ClusterIP
  selector:
    app: mongo-db
  ports:
    - port: 27017
      targetPort: 27017
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rmq-pvc
  namespace: acme
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rmq
  namespace: acme
spec:
  selector:
    matchLabels:
      app: rmq
  replicas: 1
  template:
    metadata:
      labels:
        app: rmq
    spec:
      containers:
        - name: rmq
          image: rabbitmq:3.9.4-management-alpine
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: "acmRmqUser"
            - name: RABBITMQ_DEFAULT_PASS
              value: "acmRmqPa2s"
          ports:
            - containerPort: 5672
              name: tcp
            - containerPort: 15672
              name: mhttp
          volumeMounts:
            - name: rmq-storage
              mountPath: /var/lib/rabbitmq
      volumes:
        - name: rmq-storage
          persistentVolumeClaim:
            claimName: rmq-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: rmq
  namespace: acme
spec:
  type: ClusterIP
  selector:
    app: rmq
  ports:
    - port: 5672
      targetPort: 5672
      name: tcp
    - port: 15672
      targetPort: 15672
      name: mhttp
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: es-pvc
  namespace: acme
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: es
  namespace: acme
spec:
  selector:
    matchLabels:
      app: es
  replicas: 1
  template:
    metadata:
      labels:
        app: es
    spec:
      containers:
        - name: es
          image: elasticsearch:7.14.2
          env:
            - name: discovery.type
              value: "single-node"
            - name: ES_JAVA_OPTS
              value: "-Xms512m -Xmx512m"
          ports:
            - containerPort: 9200
              name: http
            - containerPort: 9300
              name: chttp
          volumeMounts:
            - name: es-storage
              mountPath: /usr/share/elasticsearch/data
      volumes:
        - name: es-storage
          persistentVolumeClaim:
            claimName: es-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: es
  namespace: acme
spec:
  type: ClusterIP
  selector:
    app: es
  ports:
    - port: 9200
      targetPort: 9200
      name: http
    - port: 9300
      targetPort: 9300
      name: chttp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zpk
  namespace: acme
spec:
  selector:
    matchLabels:
      app: zpk
  replicas: 1
  template:
    metadata:
      labels:
        app: zpk
    spec:
      containers:
        - name: zpk
          image: openzipkin/zipkin:2.23.4
          env:
            - name: STORAGE_TYPE
              value: "elasticsearch"
            - name: ES_HOSTS
              value: "http://es:9200"
          ports:
            - containerPort: 9411
              name: http
---
apiVersion: v1
kind: Service
metadata:
  name: zpk
  namespace: acme
spec:
  type: ClusterIP
  selector:
    app: zpk
  ports:
    - port: 9411
      targetPort: 9411
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kbn
  namespace: acme
spec:
  selector:
    matchLabels:
      app: kbn
  replicas: 1
  template:
    metadata:
      labels:
        app: kbn
    spec:
      containers:
        - name: kbn
          image: kibana:7.14.2
          env:
            - name: ELASTICSEARCH_HOSTS
              value: "http://es:9200"
          ports:
            - containerPort: 5601
              name: http
---
apiVersion: v1
kind: Service
metadata:
  name: kbn
  namespace: acme
spec:
  type: ClusterIP
  selector:
    app: kbn
  ports:
    - port: 5601
      targetPort: 5601
      name: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: lgs-config
  namespace: acme
data:
  logstash-tcp.conf: |
    input {
      tcp {
          port => "7500"
          codec => json_lines
      }
    }
    output {
        stdout {}
        elasticsearch {
            hosts => ["http://es:9200"]
            index => "acme-logs-%{+YYYY.MM.dd}"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lgs
  namespace: acme
spec:
  selector:
    matchLabels:
      app: lgs
  replicas: 1
  template:
    metadata:
      labels:
        app: lgs
    spec:
      containers:
        - name: lgs
          image: logstash:7.14.2
          env:
            - name: XPACK_MONITORING_ELASTICSEARCH_HOSTS
              value: "es"
          ports:
            - containerPort: 7500
              name: tcp
          volumeMounts:
            - name: config
              mountPath: "/usr/share/logstash/pipeline/"
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: lgs-config
            items:
              - key: "logstash-tcp.conf"
                path: "logstash-tcp.conf"
---
apiVersion: v1
kind: Service
metadata:
  name: lgs
  namespace: acme
spec:
  type: ClusterIP
  selector:
    app: lgs
  ports:
    - port: 7500
      targetPort: 7500
      name: tcp